name: Docker Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build static Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: vetra-ui:static
          build-args: |
            RUNTIME_MODE=static

      - name: Verify static image size
        run: |
          IMAGE_SIZE=$(docker image inspect vetra-ui:static --format='{{ .Size }}')
          MAX_SIZE=$((50 * 1024 * 1024))
          echo "Image size: $IMAGE_SIZE bytes"
          if [ "$IMAGE_SIZE" -gt "$MAX_SIZE" ]; then
            echo "Docker image exceeds 50MB limit."
            exit 1
          fi

      - name: Run static container health check
        run: |
          docker run -d --rm --name vetra-ui-static -p 8080:80 vetra-ui:static
          for i in {1..20}; do
            if curl -fsS http://localhost:8080/ >/dev/null; then
              exit 0
            fi
            sleep 2
          done
          docker logs vetra-ui-static
          exit 1

      - name: Cleanup static container
        if: always()
        run: docker ps -a && docker rm -f vetra-ui-static || true

      - name: Build dynamic Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: vetra-ui:dynamic
          build-args: |
            RUNTIME_MODE=dynamic

      - name: Verify dynamic image size
        run: |
          IMAGE_SIZE=$(docker image inspect vetra-ui:dynamic --format='{{ .Size }}')
          MAX_SIZE=$((200 * 1024 * 1024))
          echo "Image size: $IMAGE_SIZE bytes"
          if [ "$IMAGE_SIZE" -gt "$MAX_SIZE" ]; then
            echo "Dynamic Docker image exceeds 200MB limit."
            exit 1
          fi

      - name: Run dynamic container health check
        run: |
          docker run -d --rm --name vetra-ui-dynamic -p 8081:3000 vetra-ui:dynamic
          for i in {1..30}; do
            if curl -fsS http://localhost:8081/ >/dev/null; then
              exit 0
            fi
            sleep 2
          done
          docker logs vetra-ui-dynamic
          exit 1

      - name: Cleanup dynamic container
        if: always()
        run: docker ps -a && docker rm -f vetra-ui-dynamic || true
